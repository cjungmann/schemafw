#!/usr/bin/env bash

declare WWW_ROOT="/var/www"
WWW_ROOT="/home/${SUDO_USER}"
declare WWW_NAME

# Functions for getting information from user
# get_www_root() and get_site_name()
get_www_root()
{
    local -n www_root="WWW_ROOT"
    local new_root

    local -a readargs=(
        -e
        -i "${www_root}"
        -p "Set root into which the new site is hosted: "
        new_root
    )

    read "${readargs[@]}"

    if [ ${#new_root} -gt 0 ]; then
        www_root=${new_root}
        return 0
    else
        return 1
    fi
}

get_site_name()
{
    local -n www_name=WWW_NAME

    local -a readargs=(
        -e
        -i "mysite"
        -p "Select a new site name (shared by directory, database, and virtual site): "
        www_name
    )

    read "${readargs[@]}"

    return 0
}

# Functions that test for collisions
# database_exists(), site_exists(), directory_exists()
database_exists()
{
    local name="$1"
    local dbase
    local -a dbases=( $( mysql -BN -e "show databases;" ) )
    for dbase in "${dbases[@]}"; do
        if [ "$dbase" == "$name" ]; then
            return 0
        fi
    done

    return 1
}

site_exists()
{
    local site_root="$1"
    local site_name="${site_root}.conf"

    local -a site_confs
    local site_conf
    site_confs=( $( ls -1 "/etc/apache2/sites-available" ) )
    for site_conf in "${site_confs[@]}"; do
        if [ "${site_conf}" == "${site_name}" ]; then
            return 0
        fi
    done
    return 1
}

directory_exists()
{
    [ -d $1 ]
}



check_name_for_collisions()
{
    local lname="$1"

    if site_exists "${lname}"; then
        echo "${lname} is already a site."
    elif database_exists "${lname}"; then
        echo "${lname} is already a database."
    elif directory_exists "${lname}"; then
         echo "Directory \"${lname}\" already exists."
    else
        return 0
    fi

    return 1
}

establish_database()
{
    local name="$1"

    mysql -e create\ database\ "$name"
    mysql -f "$name" < boilerplate/site.sql
}

establish_directory()
{
    local name="$1"
    local root="$2"

    # Prepare to restore entrance directory when leaving
    local OPWD="${PWD}"

    # Create directories
    cd "$root"
    mkdir "$name"
    cd "$name"
    mkdir site
    mkdir sql

    # Prepare site directory
    cp "${OPWD}/default.xsl" site
    ln -s "${OPWD}/web_includes" site/includes

    # Modify and install SRM file
    local -a sedargs=(
        -e 's/#DATABASE#/'"$name/"
        )

    sed "${sedargs[@]}" "${OPWD}/boilerplate/site.srm" > site/site.srm

    cp "${OPWD}/boilerplate/site.sql" sql
    
    cd "${OPWD}"
}

establish_site()
{
    local name="$1"
    local root="$2"

    # Create Apache site with doctored conf files
    local -a sedargs=(
        -e "s|sname|${name}|"
        -e "s|dname|${root}/${name}|"
        )

    sed "${sedargs[@]}" boilerplate/site.conf > "${name}.conf"
    mv "${name}.conf" /etc/apache2/sites-available
    a2ensite "${name}"
}

remove_parts()
{
    local root="$1"
    local name="$2"

    if database_exists "$name"; then
        mysql -e drop\ database\ "$name"
    fi
    
    if site_exists "$name"; then
        a2dissite "$name"
        rm "/etc/apache2/sites-available/${name}.conf"
    fi

    if directory_exists "${root}/${name}"; then
        rm -rf "${root}/${name}"
    fi
}




# Begin script here:

# Detect and exit for erroneous entry
if get_www_root; then
    if [ -d "${WWW_ROOT}" ]; then
        if get_site_name; then
            remove_parts "${WWW_ROOT}" "${WWW_NAME}"

            if check_name_for_collisions "${WWW_NAME}"; then

                establish_database "${WWW_NAME}"
                establish_directory "${WWW_NAME}" "${WWW_ROOT}"
                establish_site "${WWW_NAME}" "${WWW_ROOT}"
                exit 0
            fi
        fi
    else
        echo "Directory ${WWW_ROOT} does not exist."
    fi
fi

exit 1

