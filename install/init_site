#!/usr/bin/env bash

declare WWW_ROOT="/var/www"
WWW_ROOT="/home/${SUDO_USER}/www"
declare WWW_NAME

declare MYSQL_USER="root"
declare MYSQL_PASSWORD=""
declare -a MYSQL_CREDS=( -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" )

is_root()              { [ "${USER}" == "root" ]; }
command_is_installed() { command -v "$1" > /dev/null 2>&1; }
mysql_is_installed()   { command_is_installed mysql; }
apache_is_installed()  { command_is_installed a2ensite; }

get_creds()
{
    local -n user=MYSQL_USER
    local -n password=MYSQL_PASSWORD
    local -n creds=MYSQL_CREDS

    echo -n "Please enter your MySQL username: "
    read -e -i "${MYSQL_USER}"  "user"

    echo -n "Please enter your MySQL password: "
    read -e -i "${MYSQL_PASSWORD}" "password"

    creds=(
        -u"${user}"
        -p"${password}"
    )
}

webuser_is_installed()
{
    if mysql_is_installed; then

        declare -a query_arr=(
            "SELECT Execute_priv "
            "  FROM mysql.user "
            " WHERE User='webuser' "
            "  AND Host='localhost'"
        )
        declare -a urecs;

        urecs=( $( mysql "${MYSQL_CREDS[@]}" -e "${query_arr[*]}" ) )

        echo "There are ${#urecs[@]} webuser privileges."

        if [ "${#urecs[@]}" -gt 1 ]; then
            return 0
        fi
    fi

    return 1;
}

install_webuser()
{
    if mysql_is_installed; then
        mysql "${MYSQL_CREDS[@]}" -e "CREATE USER 'webuser'@'localhost' IDENTIFIED BY 'webuser'"
        mysql "${MYSQL_CREDS[@]}" -e "GRANT EXECUTE ON * TO 'webuser'@'localhost'"
    fi
}

# Functions for getting information from user
# get_www_root() and get_site_name()
get_www_root()
{
    local -n www_root="WWW_ROOT"
    local new_root

    local -a readargs=(
        -e
        -i "${www_root}"
        -p "Set root into which the new site is hosted: "
        new_root
    )

    read "${readargs[@]}"

    if [ ${#new_root} -gt 0 ]; then
        www_root=${new_root}
        return 0
    else
        return 1
    fi
}

get_site_name()
{
    local -n www_name=WWW_NAME

    local -a readargs=(
        -e
        -i "mysite"
        -p "Select a new site name (shared by directory, database, and virtual site): "
        www_name
    )

    read "${readargs[@]}"

    return 0
}

# Functions that test for collisions
# database_exists(), site_exists(), directory_exists()
database_exists()
{
    if mysql_is_installed; then
        local name="$1"
        local dbase

        local -a sqlargs=(
            "${MYSQL_CREDS[@]}"
            -BN
            -e "show databases"
        )

        local -a dbases=( $( mysql "${sqlargs[@]}" ) )
        for dbase in "${dbases[@]}"; do
            if [ "$dbase" == "$name" ]; then
                return 0
            fi
        done
    fi

    return 1
}

site_exists()
{
    if apache_is_installed; then
        local site_root="$1"
        local site_name="${site_root}.conf"

        local -a site_confs
        local site_conf
        site_confs=( $( ls -1 "/etc/apache2/sites-available" ) )
        for site_conf in "${site_confs[@]}"; do
            if [ "${site_conf}" == "${site_name}" ]; then
                return 0
            fi
        done
    fi
    return 1
}

directory_exists()
{
    [ -d $1 ]
}



check_name_for_collisions()
{
    local lname="$1"

    if site_exists "${lname}"; then
        echo "${lname} is already a site."
    elif database_exists "${lname}"; then
        echo "${lname} is already a database."
    elif directory_exists "${lname}"; then
         echo "Directory \"${lname}\" already exists."
    else
        return 0
    fi

    return 1
}

establish_database()
{
    if mysql_is_installed; then
        local name="$1"

        mysql "${MYSQL_CREDS[@]}" -e "create database ${name}"
        mysql "${MYSQL_CREDS[@]}" -D "$name" < boilerplate/site.sql
    fi
}

establish_directory()
{
    local name="$1"
    local root="$2"

    # Prepare to restore entrance directory when leaving
    local OPWD="${PWD}"

    # Create directories
    cd "${root}"
    mkdir "$name"
    cd "$name"
    mkdir site
    mkdir sql

    # Prepare site directory
    cp "${OPWD}/default.xsl" site
    cp "${OPWD}/boilerplate/index.htm" site
    ln -s "${OPWD}/web_includes" site/includes

    # Modify and install SRM file
    local -a sedargs=(
        -e 's/#DATABASE#/'"$name/"
        )

    sed "${sedargs[@]}" "${OPWD}/boilerplate/site.srm" > site/site.srm

    cp "${OPWD}/boilerplate/site.sql" sql

    echo "Changing the directory owner to \"${SUDO_USER}\" (instead of \"root\")."
    cd ..
    chown -R "${SUDO_USER}":"${SUDO_USER}" "${name}"
    
    cd "${OPWD}"
}

establish_site()
{
    if apache_is_installed; then
        local name="$1"
        local root="$2"

        # Create Apache site with doctored conf files
        local -a sedargs=(
            -e "s|sname|${name}|"
            -e "s|dname|${root}/${name}/site|"
        )

        sed "${sedargs[@]}" boilerplate/site.conf > "${name}.conf"
        mv "${name}.conf" /etc/apache2/sites-available
        a2ensite "${name}"

        systemctl reload apache2
        if [ $? -ne 0 ]; then
            if [ "${root}" != "/var/www" ]; then
                echo "[31;1mConsult troubleshooting.md.[m"
            fi
        fi
    fi
}

establish_tables_and_procs()
{
    if mysql_is_installed; then
        local name="$1"
        local root="$2"

        local -a scripts=( $( ls -1 "${root}/${name}"/sql/*.sql ) )
        local script

        for script in "${scripts[@]}"; do
            mysql "${MYSQL_CREDS[@]}" "${name}" < "${script}"
        done
    fi
}

remove_parts()
{
    local root="$1"
    local name="$2"

    if database_exists "$name"; then
        mysql "${MYSQL_CREDS[@]}" -e "drop database ${name}"
    fi
    
    if site_exists "$name"; then
        a2dissite "$name"
        rm "/etc/apache2/sites-available/${name}.conf"
    fi

    if directory_exists "${root}/${name}"; then
        rm -rf "${root}/${name}"
    fi
}




# Begin script here:

if ! is_root; then
    echo "You must be root to run this script (sudo)."
    exit 1
fi

get_creds

if ! mysql_is_installed; then
    echo "[31;1mNeither MySQL nor MariaDB are available, skipping database actions.[m"
fi

if ! apache_is_installed; then
    echo "[31;1mThe Apache web server is not available, skipping some configuration.[m"
fi

# Detect and exit for erroneous entry
if get_www_root; then
    if ! [ -d "${WWW_ROOT}" ]; then
        read -p "\"${WWW_ROOT}\" does not exists.  Create it now (y or [n])? "
        if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
            mkdir -p "${WWW_ROOT}"
        else
            exit 1
        fi
    fi
    
    if get_site_name; then
        remove_parts "${WWW_ROOT}" "${WWW_NAME}"

        if check_name_for_collisions "${WWW_NAME}"; then

            establish_database "${WWW_NAME}"
            establish_directory "${WWW_NAME}" "${WWW_ROOT}"
            establish_site "${WWW_NAME}" "${WWW_ROOT}"
            establish_tables_and_procs "${WWW_NAME}" "${WWW_ROOT}"

            if ! webuser_is_installed; then
                install_webuser
            fi
            exit 0
        fi
    fi
    else
        echo "Directory ${WWW_ROOT} does not exist."
    fi
fi

exit 1

