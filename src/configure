#!/bin/bash

output=Makefile

CGI_PATH=$(grep 'ScriptAlias\s\+\/cgi-bin' /etc/apache2/conf-available/serve-cgi-bin.conf | grep -o '\S\+$')

# truncate output file:
>${output}

ss_ssource=${PWD}/schema
ss_isource=${PWD}/web_includes

# Get flags from mysql_config:
echo "MYSQL_COMPILE_FLAGS = $(mysql_config --cflags)" >> ${output}
echo "MYSQL_LINK_FLAGS = $(mysql_config --libs)" >> ${output}

echo "CGI_PATH=${CGI_PATH}" >> ${output}

# surround EOF with single-quotes to prevent $ expansion in heredoc:
# Overriding -g with -ggdb on linux
(cat << 'EOF'
COMPILE_FLAGS = -std=c++11 -Wall -Werror -Weffc++ -pedantic -ggdb -D _DEBUG -D FASTCGI
CXXFLAGS = $(MYSQL_COMPILE_FLAGS) $(COMPILE_FLAGS)
LINK_FLAGS = $(VERSION_LINK_FLAGS) -L /usr/local/lib -lfcgi $(MYSQL_LINK_FLAGS)
CXX = g++

# flag if cmark installed for userguide target:
CMARK_FLAG := $(shell which cmark 2> /dev/null)

objlist=schema.o istdio.o xmlutils.o qstringer.o advisor.o datastack.o \
specsreader.o adbranch.o prandstr.o vclasses.o ctyper.o bindc.o \
bindstack.o procedure.o storedproc.o multipart_pull.o mysql_loaddata.o

hpplist=xmlutils.hpp istdio.hpp qstringer.hpp genericuser.hpp advisor.hpp \
adbranch.hpp datastack.hpp specsreader.hpp prandstr.hpp vclasses.hpp \
ctyper.hpp bindc.hpp bindstack.hpp procedure.hpp storedproc.hpp \
schema.hpp multipart_pull.hpp  mysql_loaddata.hpp

all: schema.fcgi

schema.fcgi : ${objlist} ${hpplist} ${VERSION_DEPS}
	$(call increment_file,$(VERSION_PATCH_FILE))
	$(CXX) -o schema.fcgi ${objlist} ${LINK_FLAGS}

istdio.o : istdio.hpp istdio.cpp
	$(CXX) $(CXXFLAGS) -c -o istdio.o istdio.cpp

qstringer.o : qstringer.hpp qstringer.cpp
	$(CXX) $(CXXFLAGS) -c -o qstringer.o qstringer.cpp

schema.o : ${hpplist} schema.cpp
	$(CXX) $(CXXFLAGS) -c -o schema.o schema.cpp

xmlutils.o : xmlutils.hpp xmlutils.cpp
	$(CXX) $(CXXFLAGS) -c -o xmlutils.o xmlutils.cpp

advisor.o : advisor.hpp advisor.cpp prandstr.hpp genericuser.hpp
	$(CXX) $(CXXFLAGS) -c -o advisor.o advisor.cpp

datastack.o : datastack.hpp datastack.cpp prandstr.hpp genericuser.hpp
	$(CXX) $(CXXFLAGS) -c -o datastack.o datastack.cpp

adbranch.o : adbranch.cpp adbranch.hpp genericuser.hpp prandstr.hpp datastack.hpp advisor.hpp
	$(CXX) $(CXXFLAGS) -c -o adbranch.o adbranch.cpp

specsreader.o : specsreader.cpp genericuser.hpp prandstr.hpp adbranch.hpp datastack.hpp advisor.hpp
	$(CXX) $(CXXFLAGS) -c -o specsreader.o specsreader.cpp

prandstr.o : prandstr.cpp prandstr.hpp genericuser.hpp istdio.hpp
	$(CXX) $(CXXFLAGS) -c -o prandstr.o prandstr.cpp

vclasses.o : vclasses.cpp vclasses.hpp prandstr.hpp genericuser.hpp istdio.hpp
	$(CXX) $(CXXFLAGS) -c -o vclasses.o vclasses.cpp

ctyper.o : ctyper.cpp ctyper.hpp vclasses.hpp prandstr.hpp genericuser.hpp
	$(CXX) $(CXXFLAGS) -c -o ctyper.o ctyper.cpp

bindc.o : bindc.cpp bindc.hpp genericuser.hpp prandstr.hpp vclasses.hpp ctyper.hpp datastack.hpp
	$(CXX) $(CXXFLAGS) -c -o bindc.o bindc.cpp

bindstack.o : bindstack.cpp bindstack.hpp genericuser.hpp prandstr.hpp vclasses.hpp ctyper.hpp datastack.hpp bindc.hpp
	$(CXX) $(CXXFLAGS) -c -o bindstack.o bindstack.cpp

procedure.o : procedure.cpp procedure.hpp ${hpplist} istdio.hpp
	$(CXX) $(CXXFLAGS) -c -o procedure.o procedure.cpp

multipart_pull.o : multipart_pull.cpp multipart_pull.hpp vclasses.hpp prandstr.hpp
	$(CXX) $(CXXFLAGS) -c -o multipart_pull.o multipart_pull.cpp

mysql_loaddata.o : mysql_loaddata.cpp mysql_loaddata.hpp 
	$(CXX) $(CXXFLAGS) -c -o mysql_loaddata.o mysql_loaddata.cpp

storedproc.o : storedproc.cpp ${hpplist}
	$(CXX) $(CXXFLAGS) -c -o storedproc.o storedproc.cpp


# Special builds
install:
	install -D --mode=755 schema.fcgi            /usr/local/lib/cgi-bin/schema.fcgi
	install -D --mode=644 ../LICENSE             /usr/share/doc/schemafw
	install -D --mode=644 ../install/default.xsl /usr/local/lib/schemafw/default.xsl
	install --mode=644 ../install/sys_procs.sql  /usr/local/lib/schemafw/sys_procs.sql
	cp -r ../install/web_includes                /usr/local/lib/schemafw/

	cp -s /usr/local/lib/cgi-bin/schema.fcgi     /usr/bin/schema.fcgi

	install -D --mode=644 ../install/schemafw.conf /etc/apache2/conf-available/schemafw.conf

userguide:
	mkdir -p /usr/share/doc/schemafw
ifdef CMARK_FLAG
	mkdir -p /usr/share/doc/schemafw/html
	cd ../userguide && ./convert
	install -m644 ../userguide/html/* /usr/share/doc/schemafw/html
	cd ../userguide && rm -r html
else
	install --mode=644 README.md                /usr/share/doc/schemafw
	install -D --mode=644 ../userguide          /usr/share/doc/schemafw
endif

update-server:
	install -D --mode=755 schema.fcgi           /usr/local/lib/cgi-bin/schema.fcgi

stop-update:
	sudo /etc/init.d/apache2 stop
	install -D --mode=755 schema.fcgi           /usr/local/lib/cgi-bin/schema.fcgi
	sudo /etc/init.d/apache2 start

update-client:
	cp -r ../install/web_includes               /usr/local/lib/schemafw/

uninstall:
	rm -f /usr/bin/schema.fcgi

	rm -r -f /usr/local/lib/cgi-bin/schema.fcgi
	rm -r -f /usr/local/lib/schemafw
	rm -r -f /usr/share/doc/schemafw

clean:
	rm -f *.o
	rm -f adbranch bindc bindstack ctyper datastack genericuser multipart_pull \
         prandstr procedure qstringer schema.fcgi schemaproc specsreader stacker \
         storedproc vclasses

release: CXXFLAGS += -U _DEBUG -D NDEBUG

release: all

increment_major:
	$(call increment_file,$(VERSION_MAJOR_FILE))
	$(call zero_file, $(VERSION_MINOR_FILE))
	$(call zero_file, $(VERSION_PATCH_FILE))

increment_minor:
	$(call increment_file,$(VERSION_MINOR_FILE))
	$(call zero_file, $(VERSION_PATCH_FILE))

include version.mak

EOF
) >> ${output}




# Move Local Variables to end of file to make sure they work.

# Local Variables:
# mode: makefile-gmake
# End:

 
