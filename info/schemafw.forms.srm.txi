@node Form SRM Instructions
@section Form SRM Instructions

There is a default form display has the following characteristics:
- simple caption
- every schema field included
- every form input is labelled with the field name
- appropriate buttons

The form can be enhanced with several SRM instructions.  The
following list of SRM instructions is **not exhaustive**, but
does provide a subset of instructions that may be useful for
development.

Keep in mind that the philosphy of the framework is that
everything can be customized, so new features should be easily
added to the standards.

@menu
* Form Context References::
* title instruction::
* intro instruction::
@end menu

@node Form Context References
@subsection Form Context References

Most form instructions take advantage of context references,
where data from the form contents can be inserted into other
text values.

Form data references use the @{@@name@} syntax.

@example
mode
   type : form-view
   procedure : App_User_View
   result
      title : @{@@name@} from @{@@company@}
      intro : View of @{@@name@}
      button
         type : open
         label : Edit @{@@name@}
         url   : ?edit&id=@{@@id@}
@end example

@node title instruction
@subsection title instruction

The title instruction can be in the first level of the mode,
as a child of a @emph{result} or as a child of a @emph{schema}.

The contents of the title instruction will replace the default
contents of the dialog caption bar.

The contents of the title instruction will resolve as context
references. (@pxref{Context References})

Pay attention when using a title in a merged document, where
the framework may assign a different priority than expected.
It is safest to define the @emph{title} instruction at the
inner-most branch.  That is, define the title under a
@emph{result} rather than under the mode.

@node intro instruction
@subsection intro instruction

As with a table type, the @emph{intro} instruction allows the
developer to add a block of text between the caption and the
form input fields.

The @emph{intro} instruction can be a @emph{schema}, @emph{result},
or @emph{resultset} instruction.  The lowest level take precedence,
so an @emph{intro} instruction in the schema will take precedence
to an @emph{intro} instruction in the @emph{result}, which, in turn,
takes precendence over the instruction in the @emph{resultset}.

The contents of the @emph{intro} instruction will resolve as 
context references.  (@pxref{Context References}).

