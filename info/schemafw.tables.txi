@node Tables
@chapter Tables

As I write this, this chapter largely serves as a place-holder in order
to include documentation about rediscovered settings that affect tables.

@menu
* Customize TR and TD Attributes::
* Inplace Filtering::
* Table Hints:: 
@end menu


@node Customize TR and TD Attributes
@section Customize TR and TD Attributes

There are two optional templates that a developer can provide to
add custom attributes to either @emph{tr} or @emph{td} elements.

The new template modes are @emph{custom_tr_attributes} and
@emph{custom_td_attributes}.

The initial motivation for these new templates was to add an attribute
to a @emph{tr} element that can be recognized by CSS for styling
according to one or more attributes of the XML data row.  The
differentiated styling was the inspiration to add the feature, but
other uses will evolve as new needs arise.

The following example contains fragments from the initial usage case:

@example
<xsl:template match="row[parent::demorecs]" mode="custom_tr_attributes">
  <xsl:if test="@@Passed=1">
    <xsl:attribute name="data-passed">true</xsl:attribute>
  </xsl:if>
</xsl:template>
@end example

Then CSS instructions color the lines:

@example
table.Schema tbody tr              @{ background-color:#FFCCCC; @}
table.Schema tbody tr[data-passed] @{ background-color:#CCFFCC; @}
@end example

For the @emph{custom_tr_attributes} template, the selected element is
a data row.  Use the templates @code{match} attribute to be sufficiently
selective to avoid unintended side-effects.

The the @emph{custom_td_attributes} template, the selected element is
the @emph{field} element of the @emph{schema}.  The template will be
called with the data row as the @emph{data} parameter.  The following
example is an illustration.  All people from Minnesota are tagged as
superior.

@example
<xsl:template match="field[@@name='fname'][parent::schema/parent::demorecs]" mode="custom_td_attributes">
  <xsl:param name="data" />
  <xsl:if test="$data/@@state='MN'">
     <xsl:attribute name="superior">true</xsl:attribute>
  </xsl:if>
</xsl:template>
@end example

@node Inplace Filtering
@section Inplace Filtering

This is a somewhat advanced techique because it requires understanding
of xpath expressions in the context of the generated XML document.

There will be times when it will be helpful for the end user to apply a
filter to see a subset of a tables contents.  In simple terms, this
requires two steps:

@table @strong
@item Set @emph{filter} attribute of source result
Set the filter attribute to an xpath expression that selects the rows
that should be included in the filtered table.
@item Replot the table
Get the table object and running the replot method.
@end table

Leave the filter attribute in place after the table replot so the filter
is reapplied in case the end user uses the column heads to sort.

In practice, there are additional required steps:

@itemize
@item Javascript file to host functions indicated by the buttons
@item @code{javascript} instruction to load new javascript file
@item Button(s) in SRM result branch to activate filters
@end itemize

In the following example, it is assumed that the table is the primary
response mode that generates the page, in order to make it easier to
find the table object for replotting.  If the table to be filtered is
not in the first SFW host object, there will be more code involved to
identify the appropriate host and object.

Here is an example javascript file, @file{custom.js}

@example
function my_filter(val)
@{
   var result = SFW.xmldoc.selectSingleNode("/*/members");
   if (result)
   @{
      // Get table object from intial response mode:
      var host = SFW.seek_top_sfw_host();
      var obj = host && SFW.get_object_from_host(host);
      if (obj)
      @{
         if (val)
         @{
            var filter_array=[
               "*[local-name()=../@@row-name]",  // generic, select all
               "[@@" + val + "]"                 // specific filter
            ];

            result.setAttribute("filter", filter_array.join(''));
         @}
         else
            result.removeAttribute("filter");

         obj.replot();
      @}
   @}
@}

function filter_none()    @{ my_filter(); @}
function filter_skaters() @{ my_filter("skater"); @}
function filter_coaches() @{ my_filter("coach"); @}
@end example

The SRM file will add the @code{javascript} instruction and the
buttons to the response mode that generates the table.

@example
list
   type          : table
   procedure     : App_Members_List
   on_line_click : ?edit&id=@{!id@}
   javascript    : custom          # leave off .js extension
   result
      name : members               # name for easier identification
      button
         type  : call
         label : All
         task  : filter_node
      button
         type  : call
         label : Skaters
         task  : filter_skaters
      button
         type  : call
         label : Coaches
         task  : filter_coaches
@end example

@node Table Hints
@section Table Hints

This section will list miscellaneous settings that affect tables.

@menu
* Table Cell Classes::
@end menu

@node Table Cell Classes
@subsection Table Cell Classes

If the default styling of a table cell does not suit the content, it
is possible to add a field setting to add a class name to the table
cells.

To set a custom class for each cell under a field's column, add a
@emph{cell-class} instruction to the field in the schema.  The @emph{cell-class}
instruction becomes an attribute of the field element in the XML
document.  The @emph{cell-class} field attribute is recognized by
the XSL stylesheet that transforms the XML.  The value of the @emph{cell-class}
instruction will be added in the class name list for the @emph{td}
elements under the field's table column.

In the following example, we have added a @emph{cell-class} instruction
to the @emph{token} field.  It uses one of the builtin classes of the
@file{schemafw.css} file, but it could refer to any CSS selector.

@example
table
   procedure : App_Person_List
   result
      schema
         field : token
            label      : Token
            cell-class : def_center
@end example
