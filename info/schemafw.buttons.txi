@node Buttons
@chapter Buttons

A button is a universal metaphor for a trigger to begin an action.  This
framework provides a variety of button definitions in order to satisfy
a developer's creativity.

@menu
* Canned Buttons::
* Custom Buttons::
* Skipping Buttons with skip_check::
@end menu

@node Canned Buttons
@section Canned Buttons

The framework provides some buttons that trigger specific actions
associated with common interactions.  The @code{add} button works with
a table interaction to create new records.  The @code{delete} button
is often added to an edit interation to indicate that the record
should be deleted.

These canned buttons are provided because they perform multiple steps
with their action.

@menu
* Canned Button Add ::
* Canned Button Delete ::
* Canned Button Close ::
@end menu

@node Canned Button Add
@subsection Canned Button Add

This button is special because it preserves the current interaction
context, displaying a dialog for entering information about a new
record.  Upon a successful submission of the new record information,
the framework adds the new record to the table interaction.

@example
list
   type          : table
   procedure     : App_Item_List
   on_line_click : ?edit
   result
      button
         type  : add
         label : Add Item
         url   : ?add
@end example

@node Canned Button Delete
@subsection Canned Button Delete

Like the @code{add} button, The @code{delete} button is a multiple-step
button.  It optionally presents the user with a confirmation dialog prior
to continuing with this often unreversable action.  After a successful
submission of the delete request, the framework can remove the target
row from the table interaction (from which the edit dialog was generated).

Notice the @ref{Context References, refs} in the @code{label},
@code{confirm}, and @code{url} instructions.  They are form data
references (@{@@ introduces a data reference) that are used here to
give helpful context-specific prompts to give the user additional hints
about what is about to happen.

@example
edit
   type        : form-edit
   schema-proc : App_Item_Update
   procedure   : App_Item_Read
   form-action : ?edit_submit
   result
      button
         type    : delete
         label   : Delete @{@@name@}?
         confirm : Confirm delete @{@@name@}.
         url     : ?delete&id=@{@@id@}&name=@{@@name@}
@end example

@node Canned Button Close
@subsection Canned Button Close

This button duplicates the @emph{Cancel} or @emph{Close} button
that is usually found at the bottom of a form.  The primary use of
this button is to create a @emph{Close} button at top of an
interaction, especially for merged table displays that must be
closeable but where it is not possible to put buttons after the
table.

The interaction must be a child and closeable.

The button can include and will honor a confirm message.

@example
show
   type      : merge
   procedure : App_Show_Connections
   result
      merge-type : table
      button
         label : Close
         type  : close
@end example

@node Custom Buttons
@section Custom Buttons

Custom buttons trigger actions that are independent of the current
context.  The button will have a context because it is generated due to
instructions in a response mode, there is no built-in context.

@menu
* Custom Call Button::
* Custom Open Button::
* Custom Jump Button::
* Custom Launch Button::
* Freeform Custom Button::
@end menu

@node Custom Call Button
@subsection Custom Call Button

This button will trigger a call to a Javascript function.
Typically, the function be defined in the application's
custom code.

@example
list
   type      : table
   procedure : App_Item_List
   button
      type  : call
      label : Initiate Chat Help
      task  : initiate_chat_help
@end example

Note that the function will be called with a single
parameter, the button element that initiates the
function call.

In order for the framework to find the function, it
must be globally-available.  That means the function must
either be a property of the global @emph{window} object,
or accessible through a global object variable.

The following code fragments show an example of an
obscure, but globally-available function.

This button declaration:

@example
button
   type : call
   label : Close Children
   task  : MyGlobal.Item.execute
@end example

@example
function Item1(val) @{ this.val=val; @}
Item1.prototype.execute = function() @{ do_something_1(this.val); @}

function Item2(val) @{ this.val=fal; @}
Item2.prototype.execute = function() @{ do_something_2(this.val); @}

var MyGlobal = @{ Item : new Item1("foo") @};
@end example

The framework can follow the dot-notation of
@code{MyGlobal.Item.execute} starting at the global
variable @emph{MyGlobal}, to the member object @emph{Item},
to find the function assigned to the prototype
@emph{execute}.  

@node Custom Open Button
@subsection Custom Open Button

This button covers the current context with a new context according
to the response mode type.  The target of this button should be a
response mode in the current application.

In the following example, the button will cause a new dialog to be
displayed, as defined in the @code{change_password} response mode
of the @file{login.srm} file.

@example
list
   type      : table
   procedure : App_Item_List
   button
      type  : open
      label : Change the Password
      url   : login.srm?change_password
@end example

@node Custom Jump Button
@subsection Custom Jump Button

This button initiates an immediate jump to a new page.  This
button is similar to the @emph{launch} button, except that the
current context is lost as the @code{window.location} value is
changed.

@example
list
   type      : table
   procedure : App_Item_List
   button
      type  : jump
      label : Read the Latest Depressing News
      url   : www.cnn.com
@end example

@node Custom Launch Button
@subsection Custom Launch Button

Access a new page in a new window or tab.  Similar to the
@emph{jump} button, using this button preserves the context
of the page calling @code{window.open(url)}.

@example
edit
   type        : form-edit
   schema-proc : App_Item_Update
   procedure   : App_Item_Value
   action      : ?edit_submit
   button
      type  : launch
      label : Test Item Page
      url   : item.srm?id=@{@@id@}
@end example
      
@node Freeform Custom Button
@subsection Freeform Custom Button

@xref{Simple Custom Javascript Class}

Among the previously described custom buttons,
@emph{call}, @emph{jump}, and @emph{open}, only the @emph{call}
button type calls a globally-accessible Javascript function.

For situations where the context of the button is significant,
a freeform custom button can be called from with its hosting
object.

In short, if a button's type instruction is not one of the
builtin button types, the framework will attempt to call
an object method with a name that is a concatentation of
@emph{process_button_} and the value of the @emph{type}
instruction.  In the following example, using a button type
of @emph{read_name} will result in a call to object prototype
function @code{process_button_read_name}.

In this example, the following response mode is included in an
SRM file:

@example
consider
   type        : form_consider
   schema-proc : App_Item_Add
   action      : ?add_submit
   schema
      button
         type  : read_name
         label : Read Name
@end example

The framework will try to create a @emph{form-consider} object
into which the generated HTML content will be installed.  The
HTML content will include a button of type @emph{read_name} that
will, upon pressing, will call a member function of @emph{form-consider}:
@code{form-consider::process_button_read_name}.

The following code implements the minimum necessary to implement
the object and method invoked by the response mode above.  Following
conventions, the code is enclosed in a prerequisite-enforcing
self-executing function.

Note the @code{form_consider} constructor and the 
@code{form_consider.prototype.process_button_read_name} function.


@example
// File name form_consider.js
(function _init()
 @{
    // Applying names to values to document how they're used in
    // the SFW.delay_init and SFW.derive functions.  The names can
    // be directly included in their respective parameter lists.
    var file_name="form_consider",
        base_class_name="form",
        class_name="form-consider";

    if ((!("SFW" in window) && setTimeout(_init,100))
         || SFW.delay_init(file_name, _init, base_class_name))
       return;

    // Constructor for object requested by "type : form_consider."
    function form_consider(actors) @{ SFW.base.call(this,actors); @}

    if (!SFW.derive(form_consider, class_name, base_class_name))
       return;

    form_consider.prototype.do_something = function() @{ alert("Doing it."); @};

    // Function for button created with "type : read_name" instruction:
    form_consider.prototype.process_button_read_name = function(button,callback)
    @{
       // Directly access another method of the object:
       this.do_something();

       // Access javascript data object attached to the host:
       var data, row;
       if ((data=this.data()) && "row" in data)
          row = data.row;

       // Access part of HTML content:
       var form = SFW.ancestor_by_tag(button,"form");
       if ((form=SFW.ancestor_by_tag(button,"form"))
           && "lname" in form
           && (field = form.lname))
       @{
          alert("'" + field.value + "' is the current last name value.");
       @}
    @};
 @}
)();
@end example


@node Skipping Buttons with skip_check
@section Skipping Buttons with skip_check

Sometimes a button should be conditionally included in an
interaction.  For example, on an import that may introduce
duplicate records, it may make sense to ask the user if the
duplicate records should be omitted from the import.  However,
the question, in button form, should only be included on the
interaction if duplicate records were detected.

Another example would be a @emph{delete} button in a schema
that is shared between @emph{add} and @emph{edit} forms.  The
@emph{delete} button should not be included in an @emph{add}
form.

@subheading Button Template with mode=''skip_check''

Before writing out a button element in response to a button
instruction, the framework checks if it should be skipped
by invoking a template with @code{mode="skip_check"}.

The @code{mode="skip_check"} parameter should return 0 if
the button should be included and anything else if the 
button should be skipped.  A default @code{mode="skip_check"}
template returns 0 to include all buttons.  Custom
@code{mode="skip_check"} templates will give custom
directions to the framework concerning whether or not
a specific button should be skipped.

To prevent unexpected missing buttons elsewhere, the
@emph{match} attribute of the @code{mode="skip_check"}
template should be explicit enough that it will only match
the appropriate button.  This often requires examining an
attribute in an ancestor of the button element in the
XML file response file send by the @code{schema.fcgi} server
program.

To prevent testing the ancestors of every button in your
application, it is prudent to add an attribute instruction
to the button definition that can be the first predicate
in the @emph{match} attribute of the @code{mode="skip_check"}
template.

@subheading Skip_check Examples

A working example of this construction can be found in the
framework file @file{sfw_isotable.xsl} (search for ``skip_check''
therein).  The isotable example uses the xpath axis @emph{ancestor}.

In the following example, pay attention to the second button,
which includes the extra @code{no_add} instruction.

@example
import-review
   type : import-review
   procedure : App_Item_Import_Review
   button
      type  : jump
      label : Accept
      url   : ?accept
   button
      type   : jump
      label  : Accept but Skip New Keywords
      url    : ?accept_no_new
      no_add : skip_dups
   button
      type   : jump
      label  : Abandon
      url    : abandon
   result
      name : import_item_review
   result
      name : keywords
@end example

The @code{no_add} instruction adds a @emph{no_add} attribute
to the button element in the @code{schema.fcgi} XML output.

In the this example, it is the existence of the template's @emph{match}
attribute that triggers the match; the value is not checked.
Other implementations might use a different name or even consider
the value of the triggering attribute.

In order for skip to work, a template must match the button
and return a value.  This code can be inserted directly into the
@file{default.xsl} stylesheet, or included from another file
with a @code{<xsl:include} instruction.

@example
<xsl:template match="button[@@no_add='skip_dups'][../import_item_review]" mode="skip_check">
  <xsl:variable name="dup_count" select="count(../keywords/row[@@id_keyword])" />
  <xsl:choose>
     <xsl:when test="$dup_count=0">1</xsl:when>
     <xsl:otherwise>0</xsl:otherwise>
  </xsl:choose>
</xsl:template>
@end example

Notice how the template matches on two facts, the @code{@@no_add} value
and the existence of a named result element.  Once matched, the
template determines if the button should be included.  In this example,
the keyword elements of the import list include a @code{id_keyword}
attribute if the keyword already exists in the database.  If there are
no keyword elements with a @code{id_keyword} attribute, there are no
duplicates, and thus, a button to exclude duplicates is not necessary.

