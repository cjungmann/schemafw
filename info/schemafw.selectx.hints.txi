@node SelectX Development Hints
@subsection SelectX Development Hints

Most Schema Framework development will start from the MySQL
and SRM files generated by @ref{Top,,,gensfw}, and that particularly
applies in this discussion.  We will describe @emph{selectx} setup
as changes from the default files.

@menu
* SelectX Tables Definition::
* SelectX Gensfw Beginning::
* SelectX Shared Sections::
@end menu

@node SelectX Tables Definition
@subsubsection SelectX Tables Definition

For the purpose of our discussion here, we will refer to three
types of tables:

@table @strong
@item Item table
This table is the source of the form display in which the @emph{select}
widget wil be hosted.  The table contains a field that is filled with
one or more references to rows in the @emph{option} table.

@item Option table
This table contains rows that provide the @emph{selectx} options

@item Map table
This optional table connects @emph{option} rows to @emph{item} rows.
This table is useful for two-way mapping.  For example, an application
might show the keywords associated with an item, and also the items
associated with a keyword.  Having an indexed @emph{map} table will
greatly improve the efficiency of the reverse search.
@end table


A @emph{selectx} widget is populated from the contents of a table,
so at least two tables, @emph{item} and @emph{option}, are typically
needed for a basic implementation (though a person-to-persons mapping
might use the same person table for both @emph{item} and @emph{option}).

The framework parses a comma-separated list of values (unsigned integer
in virtually all cases) to initialize the @emph{selectx} widget.  This
list can be stored in a field of the @emph{item} table, or it can be
generated by a subquery from the correlated @emph{map} table.

Here is a simple example:

@example
CREATE TABLE Item
(
   id   INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
   name VARCHAR(20)
);

CREATE TABLE Keyword
(
   id   INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
   name VARCHAR(20)
);

CREATE TABLE Keyword2Item
(
   id_item    INT UNSIGNED NOT NULL,
   id_keyword INT UNSIGNED NOT NULL,
   position   INT UNSIGNED,
   INDEX(id_item),
   INDEX(id_keyword)
);
@end example

@node SelectX Gensfw Beginning
@subsubsection SelectX Gensfw Beginning

Assuming a BASH environment, the following commands will generate
@emph{gsf}, @emph{sql} and @emph{srm} files for each table in a
database.

First set the DBNAME variable for replacement later:

@verbatim
DBNAME=YourDatabaseName
@end verbatim

After the DBNAME variable is set, select the following lines and
copy with Control-Shift C, then paste into a BASH console with
Control-Shift V.  Then copy the following and paste into the BASH
console to create the boilerplate files.  The command list below
will remove the unnecessary (for our purposes) SSYS_SESSION system
files.

@verbatim
TABLES=( $( mysql ${DBNAME} -BN -e "show tables" ) )
for TABLE in "${TABLES[@]}"; do gensfw -d $DBNAME -t $TABLE -c save; done
rm SSYS_SESSION*
@end verbatim

Ultimately, the @emph{gsf} files will be abandoned because we will
significantly customize the generated @emph{sql} and @emph{srm} files,
but you might want to use the @emph{.gsf} files to add session or
field labels information before we abandon them.


@node SelectX Shared Sections
@subsubsection SelectX Shared Sections
